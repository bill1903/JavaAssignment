/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.billsampas.assignment;

import java.util.Random;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.swing.JComboBox;

import java.util.Set;
import java.util.TreeMap;

/**
 * This library contains generic purpose methods that can be useful
 * outside the current assignment, and thus placed on their own file
 */
public class HelperFunctions {
	
	/** Populates a JComboBox using an enum
     * @param comboBox The JComboBox we want to populate.
     * @param enumClass The class of the enum
     * @param selectedValue The defaultValue
    */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static <E extends Enum<E>> void populateComboWithEnumValues(JComboBox comboBox, Class<E> enumClass, E selectedValue) {
	    for (Enum<E> enumVal: enumClass.getEnumConstants())
	    	comboBox.addItem(enumVal);
	    comboBox.setSelectedItem(selectedValue);
	}
	
    /** Creates a list of random integers
     * @param size The number of elements.
     * @param min The minimum value of the random integers
     * @param max The maximum value of the random integers
    */
    public static List<Integer> createRandomList(int size, int min, int max) {
    	return new Random().ints(size,min,max).boxed().collect(Collectors.toList());
    }
    
    /** Calculates the intersection of two lists
     * @param a The first list.
     * @param b The second list.
    */
    public static <T> Set<T> intersect(List<T> hashedList, List<T> iteratedList){
    	Set<T> setA = new HashSet<T>(hashedList);
    	// We use a set for the intersection because it filters outs any duplicate values automatically
    	Set<T> resultSet=new HashSet<T>(hashedList.size());
    	for (T current:iteratedList)
    		if(setA.contains(current))
    			resultSet.add(current);
    	return resultSet;
    }
    
    static final TreeMap<Double, String> sortedMap=new TreeMap<Double, String>(Collections.reverseOrder()) {
		private static final long serialVersionUID = -2614546601906876234L;
	{
		put(1d, "ns");
		put(1e+3,"µs");
		put(1e+6, "ms");
		put(1e+9, "s");
		put(6e+10, "min");
		put(3.6e+12, "hour");
	}};
	
	/** Formats the given duration using the biggest unit that allows a value greater than 1
     * @param t The time in nanoseconds.
    */
	public static String timeDurationToString(long t) {
		for(Map.Entry<Double,String> pair:sortedMap.entrySet())
			if(pair.getKey()<=t)
				return String.format("%.3f %s", t/pair.getKey(),pair.getValue());
		return "0 "+sortedMap.lastEntry().getValue();
	}
    
}
